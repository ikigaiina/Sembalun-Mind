rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    
    function isValidUid(uid) {
      return uid.matches('^[a-zA-Z0-9]{28}$') || uid.matches('^[a-zA-Z0-9-_]{1,128}$');
    }
    
    function isValidUser(data) {
      return data.keys().hasAll(['uid', 'email', 'createdAt', 'lastLoginAt']) &&
             data.uid is string &&
             data.email is string &&
             data.createdAt is timestamp &&
             data.lastLoginAt is timestamp;
    }
    
    function isValidUserUpdate(data) {
      // Allow updating these fields only
      let allowedFields = ['displayName', 'photoURL', 'lastLoginAt', 'preferences', 'progress'].toSet();
      return data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }
    
    // Users collection - core user profiles
    match /users/{uid} {
      // Users can only access their own data
      allow read, write: if isAuthenticated() && isOwner(uid) && isValidUid(uid);
      
      // Validate user data structure on create
      allow create: if isAuthenticated() && 
                   isOwner(uid) && 
                   isValidUid(uid) &&
                   isValidUser(request.resource.data);
      
      // Validate user updates
      allow update: if isAuthenticated() && 
                   isOwner(uid) && 
                   isValidUid(uid) &&
                   isValidUserUpdate(request.resource.data);
    }
    
    // Meditation sessions - user's meditation history
    match /users/{uid}/sessions/{sessionId} {
      allow read, write: if isAuthenticated() && isOwner(uid) && isValidUid(uid);
      
      // Validate session data
      allow create: if isAuthenticated() && 
                   isOwner(uid) &&
                   isValidUid(uid) &&
                   request.resource.data.keys().hasAll(['type', 'duration', 'completedAt']) &&
                   request.resource.data.type is string &&
                   request.resource.data.duration is number &&
                   request.resource.data.duration >= 0 &&
                   request.resource.data.duration <= 7200 && // Max 2 hours
                   request.resource.data.completedAt is timestamp;
    }
    
    // Journal entries - user's private thoughts
    match /users/{uid}/journal/{entryId} {
      allow read, write: if isAuthenticated() && isOwner(uid) && isValidUid(uid);
      
      // Validate journal entry
      allow create: if isAuthenticated() && 
                   isOwner(uid) &&
                   isValidUid(uid) &&
                   request.resource.data.keys().hasAll(['content', 'mood', 'createdAt']) &&
                   request.resource.data.content is string &&
                   request.resource.data.content.size() <= 10000 && // 10KB limit
                   request.resource.data.mood is string &&
                   request.resource.data.mood in ['very-happy', 'happy', 'neutral', 'sad', 'very-sad', 'stressed', 'calm', 'anxious', 'peaceful'] &&
                   request.resource.data.createdAt is timestamp;
    }
    
    // User progress and achievements
    match /users/{uid}/progress/{progressId} {
      allow read, write: if isAuthenticated() && isOwner(uid) && isValidUid(uid);
    }
    
    // User preferences and settings
    match /users/{uid}/preferences/{settingId} {
      allow read, write: if isAuthenticated() && isOwner(uid) && isValidUid(uid);
    }
    
    // Public content - meditation guides, programs, etc. (read-only for users)
    match /content/{document=**} {
      allow read: if true; // Public content accessible to all
      allow write: if false; // Only admins can write (handle via admin SDK)
    }
    
    // Meditation programs and courses
    match /programs/{programId} {
      allow read: if true; // Public programs
      allow write: if false; // Admin only
    }
    
    // Daily challenges and community content
    match /challenges/{challengeId} {
      allow read: if true; // Public challenges
      allow write: if false; // Admin only
    }
    
    // User participation in challenges
    match /users/{uid}/challengeProgress/{challengeId} {
      allow read, write: if isAuthenticated() && isOwner(uid) && isValidUid(uid);
    }
    
    // Analytics and usage data (anonymous) - with size and rate limits
    match /analytics/{document=**} {
      allow read: if false; // No direct read access
      allow write: if isAuthenticated() && 
                   request.resource.size < 1024 && // Limit document size to 1KB
                   (!resource || request.time > resource.data.lastUpdated + duration.fromMinutes(1)); // Rate limit: 1 per minute
    }
    
    // Feedback and support requests - with validation
    match /feedback/{feedbackId} {
      allow create: if isAuthenticated() && 
                   request.resource.data.uid == request.auth.uid &&
                   request.resource.data.keys().hasAll(['uid', 'message', 'category', 'createdAt']) &&
                   request.resource.data.message is string &&
                   request.resource.data.message.size() <= 5000 && // Limit message length
                   request.resource.data.category in ['bug', 'feature', 'general', 'content'];
      allow read, update: if isAuthenticated() && 
                         resource.data.uid == request.auth.uid;
    }
    
    // App configuration and feature flags (read-only)
    match /config/{configId} {
      allow read: if true; // Public config
      allow write: if false; // Admin only
    }
    
    // Deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}